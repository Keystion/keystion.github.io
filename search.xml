<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Nginx修改MySQL root用户密码]]></title>
      <url>%2F2016%2F12%2F01%2FNginx%E4%BF%AE%E6%94%B9MySQL%20root%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%2F</url>
      <content type="text"><![CDATA[1vi /etc/my.cnf 在/etc/my.cnf文件的[mysqld]下面（换行）添加skip-grant-tables，保存并退出（ESC-&gt;:-&gt;wq-&gt;回车）。 之前1234# The MySQL server[mysqld]port = 3306socket = /tmp/mysql.sock 之后12345# The MySQL server[mysqld]skip-grant-tablesport = 3306socket = /tmp/mysql.sock 重启MySQL：1/etc/init.d/mysql restart 成功提示： Stopping MySQL: [ OK ] Starting MySQL: [ OK ] 接下来继续输入：mysql；输入1234mysql&gt; USE mysql ;mysql&gt; UPDATE user SET Password = password ( &apos;OHYnECf17EPdG6wb&apos; ) WHERE User = &apos;root&apos; ;mysql&gt; FLUSH PRIVILEGES; mysql&gt; quit -&gt;回车 完成 重启MySQL 1/etc/init.d/mysqld restart 输入mysql -u root -p就会提示输入新密码，输入刚才设置的秘密就可以进去，说明设置成功。 此时你以为结束，并没有，记得把skip-grant-tables从/etc/my.cnf里面删除掉，不然即使你通过刚刚的过程修改了root用户的密码最后还是无法对数据库进行增、删、改。 正文结束了，其实下面还有一些文字👇 一个漂亮的无纺布手提袋，不单单只是一个商品的包装袋。 还能够印上贵公司的标志或者广告语，消费者在购物的同时既得到了一个精美的手提袋，而商家也得到了无形的广告宣传两全其美。 适合任何公司、任何行业作为广告宣传、赠品以及外包装之用。 海创以专业的设计和制作工艺，为您做出优质的手提袋，欢迎订购！ 联系一下子呗：15003209070]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[OS X管理多个SSH公钥密钥]]></title>
      <url>%2F2016%2F12%2F01%2FOS-X%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AAssh%E5%85%AC%E9%92%A5%E5%AF%86%E9%92%A5%2F</url>
      <content type="text"><![CDATA[最终结果文件12345678910.├── authorized_keys├── config├── id_rsa.coding├── id_rsa.coding.company├── id_rsa.coding.company.pub├── id_rsa.coding.pub├── id_rsa.github├── id_rsa.github.pub└── known_hosts 输入邮箱 1ssh-keygen -t rsa -b 4096 -C &quot;ytshang@gaoxiaobang.com&quot; 保存位置，一般就在默认的目录下即可 12Enter file in which to save the key (/Users/key/.ssh/id_rsa):/Users/key/.ssh/id_rsa.coding.company 输入密码两次确认输入，当然密码是不可见的，直接输入完，回车确认即可： 12Enter passphrase (empty for no passphrase):[输入密码]Enter same passphrase again:[再次输入密码] 复制公钥： 1pbcopy &lt; ~/.ssh/id_rsa.coding.company.pub 把你需要单独的网站SSH公钥密钥，都用以上步骤都生成下。 这是我最终生成的文件（Coding公司、Coding个人、Github个人）： 添加到authorized_keys文件里面： 123ssh-rsa AAAAB3NzaC1yc2EAAAADAQCAQCw******RQw== keystion@A.comssh-rsa AAAAB3NzaC1yc2EAAAADAQAB*******inUtQ== keystion@B.comssh-rsa AAAAB3Nz********ZCcvI1xZhBRWpZZdhv4Q== keystion@C.com config文件 12345678910111213Host github.com HostName github.com IdentityFile ~/.ssh/id_rsa.github User gitHost git.coding.net HostName git.coding.net IdentityFile ~/.ssh/id_rsa.coding User gitHost company.git.coding.net HostName git.coding.net IdentityFile ~/.ssh/id_rsa.coding.company User git 测试是否连接成功123456789ssh -T git@github.comHi Keystion! You&apos;ve successfully authenticated, but GitHub does not provide shell access.ssh -T git@git.coding.netEnter passphrase for key &apos;/Users/key/.ssh/id_rsa.coding&apos;:Hello keystion! You&apos;ve connected to Coding.net via SSH successfully!ssh -T git@company.git.coding.netHello key_kaikeba! You&apos;ve connected to Coding.net via SSH successfully! clone仓库时候多少有一点变化，pull、push等无变化。 1git clone git@[Hose]:[UserName]/****.git 嗯，正文到这里结束。 一个漂亮的无纺布手提袋，不单单只是一个商品的包装袋。 还能够印上贵公司的标志或者广告语，消费者在购物的同时既得到了一个精美的手提袋，而商家也得到了无形的广告宣传两全其美。 适合任何公司、任何行业作为广告宣传、赠品以及外包装之用。 海创以专业的设计和制作工艺，为您做出优质的手提袋，欢迎订购！ 联系一下子呗：15003209070]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[【转】折腾了一下Terminal（终端）之iTerm2]]></title>
      <url>%2F2016%2F11%2F29%2F%E3%80%90%E8%BD%AC%E3%80%91%E6%8A%98%E8%85%BE%E4%BA%86%E4%B8%80%E4%B8%8BTerminal%EF%BC%88%E7%BB%88%E7%AB%AF%EF%BC%89%E4%B9%8BiTerm2%2F</url>
      <content type="text"><![CDATA[很早之前@GhostBoyZone发给我一个关于iTerm 2的主题配置，收藏了，后来也分享给小伙伴们了，特此来Mark到自己的博客里面，顺便修复了字体的问题。 或许别人会觉得这个主题过于花哨，萝卜白菜各有所爱。还有很多大神直接用vim（应该算个神器吧？）。 所以正文从这里开始咯… 终端应用：iTerm2下载安装，这个你懂的。 按Command + , 打开偏好设定窗口： Profiles / Window，把 Settings for New Windows 中的 Style 改成 Left of Screen 让它在屏幕左侧显示（在宽屏显示器上效果不错） Keys，勾选 Hotkey 中的 Show/hide iTerm2 with a system-wide hotkey，然后设定一个热键。我个人偏爱 Command + .。现在按 Command + . 就可以随时调出或者隐藏 iTerm2 了。 配色方案：Solarized Dark下载，解压，打开 iTerm2 的偏好设定，Profiles / Colors，最下面的 Load Presets … / Import… 加载 iterm2-colors-solarized/Solarized Dark.itermcolors 配色方案。 Z-Shell系统自带了 4.0 版的 zsh，但我们可以用 brew install 安装最新的 5.X。 1234brew install zshsudo rm /bin/zsh # 替换系统自带 zshsudo ln -s `brew --prefix zsh`/bin/zsh /bin/zshchsh -s /bin/zsh # 切换系统当前用户的默认 shell 为 zsh 安装完毕，Command + W 关闭 iTerm2 当前窗口，然后按 Command + . 重新打开，此时 shell 已经换成 zsh 了。 oh-my-zsh这是一套十分强大的 zsh 配置方案。 1curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh 下载这个字体补丁并安装，给系统中的 Menlo 字体进行增补。 安装字体Monaco for Powerline。（@GhostBoyZone） 链接: https://pan.baidu.com/s/1bp7SfeR 密码: tbbk 打开 iTerm2 的偏好设定，Profiles / Text，把 Regular Font 和 Non-ASCII Font 都换成 Menlo，大小为 14pt Regular。 编辑 ~/.zshrc 文件： 12345ZSH_THEME=&quot;agnoster&quot; # 使用 agnoster 主题，很好很强大DEFAULT_USER=&quot;你的用户名&quot; # 增加这一项，可以隐藏掉路径前面那串用户名plugins=(git brew node npm) # 自己按需把要用的 plugin 写上 其中插件可以看这里https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins。 另外，建议把末尾的 export PATH 稍微调整一下，比如 Homebrew 就建议 /usr/local/bin 应该优先于 /usr/bin；另外也可以自己加上比如 Ruby Gems 目录 /usr/local/opt/ruby/bin、Node.js NPM 目录 ~/bin 等。 1export PATH=/usr/local/bin:/usr/local/sbin/:$HOME/bin:$PATH 关于 Homebrew 的路径，比如 zsh 这个包可以通过 brew --prefix zsh 知道它的目录是 /usr/local/opt/zsh，关于这些链接： /usr/local/opt/zsh 目录 -&gt; /usr/local/Cellar/zsh/版本号 目录 /usr/local/bin/zsh 文件 -&gt; /usr/local/Cellar/zsh/版本号/bin/zsh 文件 所以就有了上面那条 chsh -s 命令的写法。 重新打开 iTerm2 窗口，配置完成。玩的愉快 😜 原文：折腾了一下 Terminal By @XiNGRZ 一些链接 iTerm2 配色方案 oh-my-zsh 字体：Monaco for Powerline，链接: https://pan.baidu.com/s/1bp7SfeR 密码: tbbk oh-my-zsh Plugins插件]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[wc: command not found]]></title>
      <url>%2F2016%2F11%2F18%2Fwc-command-not-found%2F</url>
      <content type="text"><![CDATA[环境：macOS Sierra 10.12.1 (16B2555) 今天2016.11.17在用户目录下面，编辑.bash_profile的时候把PATH的值写错了，结果就出现了小白心惶惶的现象； 出现这样的现象，sudo、cd、vi等之类的命令都不能用，迷之尴尬啊，心慌了，怎么才能把.bash_profile里的PATH值修改了呢，就想到了Sublime Text编辑器可以显示隐藏文件，遂把整个用户目录丢到了编辑器里面，找到相应的值，加以修正，这才安心下来。😂 解决方法： 把用户目录丢到sublime text3里面修改了正确的PATH值。 点滴记录，fix it。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CSS中的z-index的最大值]]></title>
      <url>%2F2016%2F11%2F15%2FCSS%E4%B8%AD%E7%9A%84z-index%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC%2F</url>
      <content type="text"><![CDATA[图片来自：www.annyhe.com/zindex/#3 z-index属性指定了一个元素及其子元素的 z-order。 当元素之间重叠的时候，z-order 决定哪一个元素覆盖在其余元素的上方显示。 通常来说 z-index 较大的元素会覆盖较小的一个。 —MDN z-index 业务代码中看见了这样一段code，然后想都没有想，直接把另一个元素的z-index值设置为：999999999999999 + 1，就能把它覆盖掉吧，结果并没有那么理想。◻︎_-|| 然后就去查找z-index在各个浏览器中的最大值是多少呢，Google了一番找到了下面这个表格， Browser Max z─index value When exceeded, value changes to: 浏览器 最大值 超过时,值的变化： Firefox 0-2 2147483647（length:10） element disappears/元素消失 Firefox 3 2147483647（length:10） 0 Firefox 4+ 2147483647（length:10） 2147483647（length:10） Safari 0-3 16777271（length:8） 16777271（length:8） Safari 4+ 2147483647（length:10） 2147483647（length:10） Internet Explorer 6+ 2147483647（length:10） 2147483647（length:10） Chrome 29+ 2147483647（length:10） 2147483647（length:10） Opera 9+ 2147483647（length:10） 2147483647（length:10） 举个栗子： See the Pen z-index max value by Keystion (@Keystion) on CodePen. 特此而来Mark一下，没有辣么多浏览器，也就测试了下： chrome（版本 54.0.2840.87 (64-bit)） Safari（版本 10.0.1 (12602.2.14.0.7)） Firefox（49.0.2） 参考文献： MDN z-index Maximum value of z-index Z-index and Layering with CSS]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[快速切图]]></title>
      <url>%2F2016%2F11%2F13%2F%E5%BF%AB%E9%80%9F%E5%88%87%E5%9B%BE%2F</url>
      <content type="text"><![CDATA[第一种：按C用切片工具，然后随便框选你要的内容，F3（mac可能是Fn+F3），然后cmd+n，ctrl+v或者（F4）（mac可能是Fn+F4）整个过程不用3s 第二种：把你的要图层设置成组，然后命个名，比如xxx.png然后菜单 &gt; 文件&gt; 生成 &gt; 生成xxx资源什么鬼的然后保存 第三种：把你要的图层合并，M，cmd+c，cmd+n，cmd+v 其他：第三方工具，一大堆 By：Evan]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Coder 2 Leader]]></title>
      <url>%2F2016%2F11%2F13%2FCoder-2-Leader%2F</url>
      <content type="text"><![CDATA[公司内部TechDay分享，有@Terry主讲，学习了很多，特此Mark一下。 困惑一：Code vs People 机器/人 Code：可控 People：多变 从code和人的角度去阐述了coder转变到leader的过程，了解团队中的每一个人，学习他们的经验。即使没有做过管理也无妨，尝试去管理一件件小事情开始。 困惑二：0/1 vs X 灰色 0/1（二进制）：正确/错误 X（未知数）：没有固定值，管理没有正确、错误，有足够产出的团队就是好团队 对于初学者而言需要“暴力”②，成则成，败则败。 Leader和手下员工比例在：1 vs 7的情况下是有时间去贴身管理每一个人的，超出这个范围将无法贴身去管理一些细节问题。 困惑三：权利双刃剑 时间/效率 管理是双向的，向上的管理，角色转换Coder care Leader需要什么？Leader care 产出。 空降Leader如何去管理？ 前因后果了解之后再去使用权力，后来者天生具备弱势，相信认可别人，用实例（力）去证明，黔驴技穷之时可使用权力。 困惑四：沟通力量 意大利人/赞比亚人（小故事）① 简介：意呆利人去援助赞比亚，教当地人种地，当地人表示毫无兴趣。于是意呆利人就自己在河谷边种了番茄，长势喜人。成熟的那一晚，从赞比西河里跳出200多头河马，把西红柿吃个精光。第二天，意呆利人完全惊呆了，赞比亚人过来拍了拍肩膀安慰说：没错，这就是我们不在这里耕种的原因。 困惑五：公开演讲 TED Talks 注： 木头的体积 暴力：条件允许的情况下贴身管理，工期紧任务重； 网易公开课上有段关于这个的演讲《想要帮助别人？闭嘴，听人家说！》]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[简单学习CSS box model Box-sizing]]></title>
      <url>%2F2016%2F06%2F02%2F%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0CSS-box-model-box-sizing%2F</url>
      <content type="text"><![CDATA[CSS盒模型描述了一个为文档树中的元素生成的并根据可视化格式模型进行布局的矩形框 先上一张Banner. Box-sizing这个CSS3中出现的新属性，以前只是用用，没有仔细的去学习一下（出来混总是要还的），最近不算忙就补习一下。 整理了一个简单的脑图 一个简单的demo See the Pen box-sizing by Keystion (@Keystion) on CodePen. content-box(标准盒模型) 12345678910box.width = content-box.width(300px)box.height = content-box.height(300px)box所占位置大小宽：margin-left(10px) + border-left-width(10px) + padding-left(10px) + content-width(300px) + padding-right(10px) + border-right-width(10px) + margin-right(10px) = 360px高：margin-top(10px) + border-top-width(10px) + padding-top(10px) + content-height(300px) + padding-bottom(10px) + border-bottom-width(10px) + margin-bottom(10px) = 360px border-box 12345678910box.width = border-left-width(10px) + padding-left(10px) + content-width(260px) + padding-right(10px) + border-right-width(10px) = 300pxbox.height = border-top-width(10px) + padding-top(10px) + content-height(260px) + padding-bottom(10px) + border-bottom-width(10px) = 300pxbox所占位置大小宽：margin-left(10px) + border-left-width(10px) + padding-left(10px) + content-width(260px) + padding-right(10px) + border-right-width(10px) + margin-right(10px) = 320px高：margin-top(10px) + border-top-width(10px) + padding-top(10px) + content-height(260px) + padding-bottom(10px) + border-bottom-width(10px) + margin-bottom(10px) = 320px wiki相关： MDN - box-sizing MDN - 盒模型]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Javascript 变量的寻址与传递]]></title>
      <url>%2F2016%2F05%2F29%2F%E3%80%90%E8%BD%AC%E3%80%91Javascript-%E5%8F%98%E9%87%8F%E7%9A%84%E5%AF%BB%E5%9D%80%E4%B8%8E%E4%BC%A0%E9%80%92%2F</url>
      <content type="text"><![CDATA[代码片段 11234567891011var obj = &#123;&#125;; obj.x = 1; obj.y = 2;function test (obj) &#123; obj.x = 111;&#125;test(obj);console.log(obj);// result &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#123;x=111,y=2&#125; 代码片段 2123456789101112var obj = &#123;&#125;; obj.x = 1; obj.y = 2;function test(obj) &#123; var obj2 = &#123;&#125;; obj = obj2;&#125;test(obj);console.log(obj)// result &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#123;x=1,y=2&#125; 代码片段一就不在讲述，但凡对值类型和引用类型有一定的了解的话，那这个应该是没疑问的。 代码片段二有两个应该注意的地方： 1 test方法内变量的寻址 test方法内部可以取到三个变量，新定义了的对象obj2、参数obj、还有方法外的obj。这三个参数有一个特别要注意的地方是，后面两个的名字是一样的，这样在方法运行的时候一定会优先取得参数的那个obj变量。而方法外的那个obj参数实际相当于window.obj。 2 变量的传递过程 在调用test方法，并传入方法外的obj变量，实际相当于传入window.obj这样一个引用类型①，也就是说代码obj = obj2;实际是对这个拷贝的地址的改变，因为这个地址只是个拷贝，所以这并不会改变其指向的真实对象。而代码片段1的obj.x = 111;这会通过obj这个地址查询到x这个属性，并对其赋值。 other123456789101112131415var num = 1;function outFn() &#123; this.num = 10; function inFn() &#123; console.log(num); var num = 100; console.log(this.num); console.log(window.num); &#125; return inFn;&#125;var newfn = outFn();new newfn(); // this指向了对象 注：① 引用类型：引用类型的特点是在传递的过程中并不进行自身的值复制，而是传入地址的拷贝。 原文：js变量的寻址与传递 By rulee]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[足迹所到过城市之天津]]></title>
      <url>%2F2016%2F05%2F29%2F%E8%B6%B3%E8%BF%B9%E6%89%80%E5%88%B0%E8%BF%87%E5%9F%8E%E5%B8%82%2F</url>
      <content type="text"><![CDATA[先上美图： 天津塘沽外滩公园 为什么天津辣（那）么多漂亮的地方，偏偏放一张外滩公园的图片，因为在天津塘沽待的时间相对比天津其他地方久，所以就放一张到目前印象相对比较深刻的地方； 天津记忆碎片：豆腐脑、豆浆、油条、煎饼果子、塘沽区、洋货市场、轻轨、天津方言、保税区、室内装修、学生、天津奥林匹克体育中心、第三大街、信义隆装饰有限公司、泰达 初次结缘天津大概是初三毕业之后的暑假（2006年7、8月份），有两个月的空闲期；所以就出去打工（玩咯），正好这是亲戚有在承包奥体中心的基础建设；嗯，也就是这个时候接触到天津，在奥体中心度过了一个多月，之后就回去念高中了。 再次亲近天津，应该就是2007年、2008年，那时候就是来这里打工咯；父亲大人在他朋友的装修装饰公司①上班，我就来这里打工学习生存技能；到这里接触到了室内装潢、设计师、水电工、木工、瓦工、油漆工（刮腻子和刷涂料）等等（他们都是很可爱的人）；也学到了很多技能：水电工、油漆工、木工等；每天从住的地方（韶山北里②）出发，带上必备的生存工具，吃点早餐：煎饼果子、豆浆油条、豆腐脑；屁颠屁颠的骑个自行车（有时候电动车）穿梭于塘沽区、滨海新区的大街小巷、各种小区去做干活；累并快乐着。 当然也经历过奥运会了； 感觉会写好多… 就先写这些吧。 图片集咯↑ 外滩公园 标志建筑物 ↑ 外滩公园 夜景 ↑ 外滩公园 船和调皮的顽童 ↑ 外滩公园 海门大桥 ↑ 外滩公园 东方公主 ↑ 洋货市场 注：① 装修装饰公司：北京信义隆装饰有限公司（天津分公司），位置天津滨海新区第三大街豪威大厦B座104；② 韶山北里：天津市塘沽区杭州道与韶山路交口； 图片资源： 桃子4427 云水禅心]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[扯淡小分队【第N+回】]]></title>
      <url>%2F2016%2F05%2F22%2F%E6%89%AF%E6%B7%A1%E5%B0%8F%E5%88%86%E9%98%9F%E3%80%90%E7%AC%ACN%2B%E5%9B%9E%E3%80%91%2F</url>
      <content type="text"><![CDATA[为什么是第N+回呢，因为之前有好几回了，记忆模糊（好记忆不如烂笔头，所以就想记下来） 时间地点人物事件时间：2016-05-23地点：七年咖啡 老北京前后涮羊肉(和平里店)人物：旭旭、苗神、教授 和 我事件：周末约吗 我们的扯淡小分队又聚会了；聚会目的是什么呢，说白了就是扯扯大家近况。旭旭刚从日本团建回来，给我们带来一些【Made in Japan】的小点心，然后我们就愉快的决定周六聚聚😄（吃货联盟）。 先来张美图： 简单的JavaScript异步之setTimeout（ES5）猜想下会打印什么东西来； 代码: 12345for (var i = 0; i &lt; 10; i++) &#123; setTimeout(function() &#123; console.log(i); &#125;, 0);&#125; 预览： 简单的解释： 嗯，就这些。 拓展 通过作用域来输出0-91） 可用ES5函数作用域； 1234567for (var i = 0; i &lt; 10; i++) &#123; (function (i) &#123; // 作用域 setTimeout(function() &#123; console.log(i); &#125;, 0); &#125;)(i);&#125; 2） ES6的块级作用域 把var换成let 12345for (let i = 0; i &lt; 10; i++) &#123; setTimeout(function() &#123; console.log(i); &#125;, 0);&#125; 图片集咯 七年咖啡Desk 小点心 （巧克力&amp;&amp;杏仁饼干） 老北京前后涮羊肉的火锅 未完待续……]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[watch&figlet]]></title>
      <url>%2F2016%2F05%2F13%2Fwatch-figlet%2F</url>
      <content type="text"><![CDATA[安装 watch1$ sudo brew install watch iTerm or Terminal（终端） 示例代码 123$ watch -t -n1 &quot;date&quot;2016 3 29 20 33 54 CST watch &amp;&amp; figlet 123456789$ watch -t -n1 &quot;date +%T|figlet -f banner&quot; ##### ### # ##### # # # ###### # # # ### # # # # ### # # # # # # # # # # # # # # # # ##### # # ##### # # # # ####### # # # # ####### # ####### ## # # ### # # # ### # # ######## ### # ##### # # # ##### Homebrew]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[figlet]]></title>
      <url>%2F2016%2F05%2F13%2Ffiglet%2F</url>
      <content type="text"><![CDATA[安装 figlet1$ sudo brew install figlet iTerm or Terminal（终端） 示例代码 1234567$ figlet &quot;webclown&quot; _ ___ _____| |__ ___| | _____ ___ __\ \ /\ / / _ \ &apos;_ \ / __| |/ _ \ \ /\ / / &apos;_ \ \ V V / __/ |_) | (__| | (_) \ V V /| | | | \_/\_/ \___|_.__/ \___|_|\___/ \_/\_/ |_| |_| 设置字体 1234567$ figlet -f tinker-toy &quot;W e b c l o w n&quot;o o o o| | | |o o o o-o O-o o-o | o-o o o o o-o \ / \ / |-&apos; | | | | | | \ / \ / | | o o o-o o-o o-o o o-o o o o o Homebrew Wiki http://www.figlet.org/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[通过wget下载网站]]></title>
      <url>%2F2016%2F05%2F13%2F%E9%80%9A%E8%BF%87wget%E4%B8%8B%E8%BD%BD%E7%BD%91%E7%AB%99%2F</url>
      <content type="text"><![CDATA[通过wget下载一个网站工具 iTerm or Terminal（终端） 示例代码 1wget -r -p -np -k --restrict-file-names=nocontrol [url] 如何在电脑上安装wget Homebrew 简单的 shell 脚本wget.sh put it in /Users/$user 123chmod -x wget.sh // Writable./wget [url] // Any directory Wiki https://en.wikipedia.org/wiki/Wget https://wiki.ubuntuusers.de/wget/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Git-常用命令]]></title>
      <url>%2F2015%2F04%2F14%2F%E3%80%90%E8%BD%AC%E3%80%91Git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
      <content type="text"><![CDATA[develop via a single branch1234t branch -m &#123;&#123;branch&#125;&#125;git fetch origingit rebase origin/master -igit push origin &#123;&#123;branch&#125;&#125; create a new branch1git checkout -b &#123;&#123;branch&#125;&#125; checkout remote branch1git checkout -b &#123;&#123;branch&#125;&#125; origin/&#123;&#123;branch&#125;&#125; merge branch to master12git checkout mastergit merge &#123;&#123;branch&#125;&#125; delete branch12git branch -D &#123;&#123;localBranch&#125;&#125;git push --delete origin &#123;&#123;remoteBranch&#125;&#125; rename repo1234567git remote -v// View existing remotes// origin https://github.com/user/repo.git (fetch)// origin https://github.com/user/repo.git (push)git remote set-url origin https://github.com/user/repo2.git// Change the &apos;origin&apos; remote&apos;s URL add tag12git tag &#123;&#123;tag&#125;&#125;git push --tags add tag for a history commit12345678910// Set the HEAD to the old commit that we want to taggit checkout &#123;&#123;leading 7 chars of commit&#125;&#125;// temporarily set the date to the date of the HEAD commit, and add the tagGIT_COMMITTER_DATE=&quot;$(git show --format=%aD | head -1)&quot; git tag -a &#123;&#123;tag&#125;&#125; -m &quot;&#123;&#123;commit message&#125;&#125;&quot;// set HEAD back to whatever you want it to begit checkout mastergit push --tags delete tag12git tag --delete &#123;&#123;tag&#125;&#125;git push --delete origin &#123;&#123;tag&#125;&#125; gh-pages1http://&#123;&#123;group&#125;&#125;.github.io/&#123;&#123;repo&#125;&#125;/ npm add owner1npm owner add &#123;&#123;name&#125;&#125; Source：fool2fish 一些链接 常用 Git 命令清单]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PSD图层管理指南]]></title>
      <url>%2F2015%2F04%2F14%2FPSD%E5%9B%BE%E5%B1%82%E7%AE%A1%E7%90%86%E6%8C%87%E5%8D%97%2F</url>
      <content type="text"><![CDATA[PS图层命名和分组看似麻烦，会打断设计的兴致，但是当图层多得自己都找不到时就知道好处了。科学有调理的管理你的PSD既是一名优秀设计师的必备技能，也是设计师跟上下游同事打交道的礼仪准则。和你的基友协同工作的过程中，可以说对PSD图层的命名和管理是最大的冲突所在，一堆不知所云的“新建图层”和“图层1副本”只会让基友抓狂！ 图层管理的精髓在于：分组、链接和命名。 合理使用图层分组（图层文件夹）。以UI组件、功能模块等为分组基准，图层分组可以更快地看清楚整个文件的架构，并且可以很快的找到想要的那一层。 善用链接，把关联紧密的图层相互链接，这样能保持相对位置、大小不变。就像人的脖子和头是一个整体，相互连在一起的 每个分组以及分组外的每个图层都必须命名，且是有意义的命名，像“图层1、副本、副本2、组3”这样的图层命名是严格禁止的，养成新建图层后第一件事就是命名的习惯。图层命名中英文均可。 icon与按钮。icon命名以icon-为前缀，按钮命名以btn-，例如：icon-close.png, btn-login.png , btn-login-hover.png。 删除不必要的图层。你是一个图层堆积狂吗？PSD在交付给前端之前，请删除不必要的图层。 文本图层不要合并或格式化，方便修改及前端同事复制文本内容。 纯色文本不要使用颜色叠加进行配色，请使用文字工具进行配色。 字体的字号必须是整数，不要随意拉伸字体。除了会使字体变得难看模糊之外， HTML/CSS也无法实现这种效果。 中大型、长期项目需要提供至少两份附件：1、所有icon与按钮（各种状态）的集合；2、设计稿配色标注，可使用“设计稿配色标注”工具。]]></content>
    </entry>

    
  
  
</search>
